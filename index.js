require('dotenv').config();
const express = require('express');
const { Telegraf, Markup } = require('telegraf');
const { translations, formTranslations } = require('./translations');

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = parseInt(process.env.ADMIN_ID);
const CHANNEL_ID = '@Julii_und_Aron';

// --- –¢–∏–º—á–∞—Å–æ–≤—ñ —Å—Ö–æ–≤–∏—â–∞ ---
let stock = 20;
let orders = [];
const userLanguage = {};
const userOrders = {};
let adminState = {};

// ==========================
// üì¶ –ö–û–†–ò–°–¢–£–í–ê–ß
// ==========================
bot.start((ctx) => {
  if (ctx.from.id === ADMIN_ID) {
    return ctx.reply("üë©‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", Markup.keyboard([
      ["üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", "üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"],
      ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", "üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä"]
    ]).resize());
  }

  ctx.reply(
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Hi üëã Please choose a language / Hallo üëã Bitte w√§hlen Sie eine Sprache',
    Markup.inlineKeyboard([
      [Markup.button.callback('üá©üá™ Deutsch', 'lang_de')],
      [Markup.button.callback('üá¨üáß English', 'lang_en')],
      [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')]
    ])
  );
});

// --- –í–∏–±—ñ—Ä –º–æ–≤–∏ ---
bot.action(['lang_de', 'lang_en', 'lang_ru'], (ctx) => {
  ctx.answerCbQuery();
  let lang = ctx.match[0].split('_')[1];
  userLanguage[ctx.from.id] = lang;

  ctx.reply(translations[lang].welcome, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback(translations[lang].order, 'order')],
      [Markup.button.callback(translations[lang].payment, 'payment')],
      [Markup.button.callback(translations[lang].shipping, 'shipping')],
      [Markup.button.callback(translations[lang].questions, 'questions')]
    ])
  });
});

// --- Order ---
bot.action('order', async (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    if (['member', 'administrator', 'creator'].includes(member.status)) {
      ctx.reply(formTranslations[lang].askName);
      userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 63 } };
    } else {
      ctx.reply(formTranslations[lang].subscribe, Markup.inlineKeyboard([
        [Markup.button.url(formTranslations[lang].subscribeBtn, 'https://t.me/Julii_und_Aron')],
        [Markup.button.callback(formTranslations[lang].checkSub, 'check_sub')],
        [Markup.button.callback(formTranslations[lang].buyNoSub, 'order_no_sub')]
      ]));
    }
  } catch (err) {
    console.error(err);
    ctx.reply('‚ö†Ô∏è Error checking subscription');
  }
});

// --- Check Sub ---
bot.action('check_sub', async (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    if (['member', 'administrator', 'creator'].includes(member.status)) {
      ctx.reply(formTranslations[lang].askName);
      userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 63 } };
    } else {
      ctx.reply(formTranslations[lang].notSubscribed);
    }
  } catch (err) {
    ctx.reply('‚ö†Ô∏è Error checking subscription');
  }
});

// --- Order without sub ---
bot.action('order_no_sub', (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  ctx.reply(formTranslations[lang].askName);
  userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 70 } };
});

// --- –§–æ—Ä–º–∞ ---
bot.on('text', (ctx) => {
  // —è–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç—É—Ç
  if (ctx.from.id === ADMIN_ID) return;

  const order = userOrders[ctx.from.id];
  if (!order) return;
  const lang = order.lang;
  const text = ctx.message.text.trim();

  switch (order.step) {
    case 'name':
      if (text.split(" ").length < 2) {
        return ctx.reply("‚ùå Name must contain at least 2 words / –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞ / –Ü–º‚Äô—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞");
      }
      order.data.name = text;
      order.step = 'address';
      ctx.reply(formTranslations[lang].askAddress);
      break;
    case 'address':
      order.data.address = text;
      order.step = 'email';
      ctx.reply(formTranslations[lang].askEmail);
      break;
    case 'email':
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text)) {
        return ctx.reply("‚ùå Invalid email / –ù–µ–≤–µ—Ä–Ω—ã–π email / –ù–µ–≤—ñ—Ä–Ω–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ—à—Ç–∏");
      }
      order.data.email = text;
      order.step = 'phone';
      ctx.reply(formTranslations[lang].askPhone);
      break;
    case 'phone':
      if (!/^\+\d{7,15}$/.test(text)) {
        return ctx.reply("‚ùå Invalid phone format. Example: +491234567890 / –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79123456789 / –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü—Ä–∏–∫–ª–∞–¥: +380931234567");
      }
      order.data.phone = text;
      order.step = 'payment';
      ctx.reply(formTranslations[lang].askPayment, Markup.inlineKeyboard([
        [Markup.button.callback(formTranslations[lang].payPaypal, 'pay_paypal')],
        [Markup.button.callback(formTranslations[lang].paySepa, 'pay_sepa')]
      ]));
      break;
  }
});

// --- –û–ø–ª–∞—Ç–∞ ---
bot.action(['pay_paypal', 'pay_sepa'], (ctx) => {
  const order = userOrders[ctx.from.id];
  if (!order) return;
  const lang = order.lang;
  const orderId = Date.now().toString();

  order.data.payment = ctx.match[0] === 'pay_paypal' ? 'PayPal' : 'SEPA';
  order.id = orderId;
  order.userId = ctx.from.id;

  orders.push(order);

  let message = "";
  if (ctx.match[0] === 'pay_paypal') {
    const link = order.data.price === 63
      ? "https://www.paypal.com/paypalme/JuliiAron/63"
      : "https://www.paypal.com/paypalme/JuliiAron/70";

    message = `üîó [${order.data.price} ‚Ç¨ ‚Üí PayPal](${link})\n\nPlease pay and send a screenshot.\nüÜî Order: ${orderId}`;
  } else {
    message = `üè¶ SEPA\n\nRecipient: Iuliia Troshina\nIBAN: DE77 7505 0000 0027 9627 45\nBIC: BYLADEM1RBG\nAmount: ${order.data.price} ‚Ç¨\nPurpose: Julii & Aron Order ${order.data.price}\n\nSend screenshot after payment.\nüÜî Order: ${orderId}`;
  }

  ctx.reply(message, { parse_mode: "Markdown" });

  // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É (—Ä–æ—Å—ñ–π—Å—å–∫–æ—é)
  const orderSummary = `
üÜî –ó–∞–∫–∞–∑: ${orderId}
üë§ –ò–º—è: ${order.data.name}
üè† –ê–¥—Ä–µ—Å: ${order.data.address}
‚úâÔ∏è Email: ${order.data.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.data.phone}
üí≥ –û–ø–ª–∞—Ç–∞: ${order.data.payment}
üí∞ –°—É–º–º–∞: ${order.data.price} ‚Ç¨
  `;
  ctx.telegram.sendMessage(ADMIN_ID, `üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n${orderSummary}`);

  delete userOrders[ctx.from.id];
});

// --- –û–±—Ä–æ–±–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ ---
bot.on('photo', async (ctx) => {
  if (ctx.from.id === ADMIN_ID) return;
  const lastOrder = orders.find(o => o.userId === ctx.from.id);
  if (!lastOrder) return ctx.reply("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.");

  const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
  await ctx.telegram.sendPhoto(ADMIN_ID, photoId, {
    caption: `üñº –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\nüÜî –ó–∞–∫–∞–∑: ${lastOrder.id}`
  });
  ctx.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
});

// ==========================
// üë©‚Äçüíª –ê–î–ú–ò–ù–ö–ê
// ==========================
bot.hears("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  if (orders.length === 0) {
    ctx.reply("‚ÑπÔ∏è –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç");
  } else {
    let list = orders.map(o => `üÜî ${o.id} | ${o.data.name} | ${o.data.price}‚Ç¨`).join("\n");
    ctx.reply(`üìã –ó–∞–∫–∞–∑—ã:\n\n${list}\n\nüìä –û—Å—Ç–∞—Ç–æ–∫: ${stock}`);
  }
});

bot.hears("üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤: ${stock}`);
});

bot.hears("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤:");
  adminState[ctx.from.id] = "update_stock";
});

bot.hears("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply("üì¶ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:");
  adminState[ctx.from.id] = "enter_orderId";
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
bot.on("text", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const state = adminState[ctx.from.id];

  if (state === "update_stock") {
    const newStock = parseInt(ctx.message.text);
    if (!isNaN(newStock) && newStock >= 0) {
      stock = newStock;
      ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${stock}`);
    } else {
      ctx.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ");
    }
    adminState[ctx.from.id] = null;
  }

  if (state === "enter_orderId") {
    const orderId = ctx.message.text;
    ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:");
    adminState[ctx.from.id] = { step: "enter_tracking", orderId };
  }

  if (state?.step === "enter_tracking") {
    const trackNumber = ctx.message.text;
    const order = orders.find(o => o.id === state.orderId);
    if (order) {
      bot.telegram.sendMessage(order.userId, `üì¶ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${trackNumber}`);
      ctx.reply(`‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (üÜî ${order.id})`);
      stock = stock - 1;
    } else {
      ctx.reply("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    adminState[ctx.from.id] = null;
  }
});

// ==========================
// üöÄ EXPRESS
// ==========================
const app = express();
app.use(express.json());
app.use(bot.webhookCallback('/webhook'));
bot.telegram.setWebhook(process.env.WEBHOOK_URL + '/webhook');
app.get('/', (req, res) => res.send('Julie & Aron Bot —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ'));
app.listen(process.env.PORT || 8080, () => {
  console.log('Server running on port', process.env.PORT || 8080);
});
