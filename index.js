require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const express = require('express');

// --- –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏ –æ–∫—Ä–µ–º–æ ---
const de = require('./translations/de');
const en = require('./translations/en');
const ru = require('./translations/ru');

// –§–æ—Ä–º—É—î–º–æ –æ–± º—î–∫—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
const translations = {
  de: de.translations,
  en: en.translations,
  ru: ru.translations,
};

const formTranslations = {
  de: de.formTranslations,
  en: en.formTranslations,
  ru: ru.formTranslations,
};

// --- ENV ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID) || 0;
const CHANNEL_ID = process.env.CHANNEL_ID || '@Julii_und_Aron';
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = Number(process.env.PORT) || 8080;

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required');

const bot = new Telegraf(BOT_TOKEN);

// --- –°—Ö–æ–≤–∏—â–∞ ---
let stock = 20;
const userLanguage = {};
const userOrders = {};
let orders = [];
const adminState = {};

// --- –•–µ–ª–ø–µ—Ä–∏ ---
const getLang = (userId) => userLanguage[userId] || 'en';

function lastOrderFor(userId) {
  const list = orders.filter((o) => o.userId === userId);
  if (list.length === 0) return null;
  return list.sort((a, b) => Number(b.id) - Number(a.id))[0];
}

async function isSubscribed(ctx) {
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    return ['member', 'administrator', 'creator'].includes(member?.status);
  } catch (err) {
    return false;
  }
}

// --- START ---
bot.start(async (ctx) => {
  if (ctx.from?.id === ADMIN_ID) {
    return ctx.reply(
      'üë©‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      Markup.keyboard([
        ['üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤', 'üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞'],
        ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', 'üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä'],
      ]).resize()
    );
  }

  return ctx.reply(
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Hi üëã Please choose a language / Hallo üëã Bitte w√§hlen Sie eine Sprache',
    Markup.inlineKeyboard([
      [Markup.button.callback('üá©üá™ Deutsch', 'lang_de')],
      [Markup.button.callback('üá¨üáß English', 'lang_en')],
      [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')],
    ])
  );
});

// --- –í–∏–±—ñ—Ä –º–æ–≤–∏ ---
bot.action(['lang_de', 'lang_en', 'lang_ru'], async (ctx) => {
  await ctx.answerCbQuery();
  const data = ctx.callbackQuery?.data || 'lang_en';
  const lang = data.split('_')[1] || 'en';
  userLanguage[ctx.from.id] = lang;

  return ctx.editMessageText(translations[lang].welcome, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback(translations[lang].order, 'order')],
      [Markup.button.callback(translations[lang].payment, 'payment')],
      [Markup.button.callback(translations[lang].shipping, 'shipping')],
      [Markup.button.callback(translations[lang].questions, 'questions')],
    ]),
  });
});

// --- —Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ (–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –æ–ø–ª–∞—Ç–∏, –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–æ—â–æ) ---
// –ö–æ–¥ –ª–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–∏–π —Å–∞–º–∏–π, —Ç—ñ–ª—å–∫–∏ –∑–∞–º—ñ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ
// translations[lang] —Ç–∞ formTranslations[lang]
