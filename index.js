require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const express = require('express');

// --- –ü–µ—Ä–µ–∫–ª–∞–¥–∏ ---
const { translations, formTranslations } = require('./translations');

// --- ENV ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID) || 0;
const CHANNEL_ID = process.env.CHANNEL_ID || '@Julii_und_Aron';
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = Number(process.env.PORT) || 8080;

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required');
const bot = new Telegraf(BOT_TOKEN);

// --- –°—Ö–æ–≤–∏—â–∞ ---
let stock = 20;
const userLanguage = {};
const userOrders = {};
let orders = [];
const adminState = {};
const userIds = new Set();

// --- –•–µ–ª–ø–µ—Ä–∏ ---
const getLang = (userId) => userLanguage[userId] || 'en';
const lastOrderFor = (userId) => {
  const list = orders.filter(o => o.userId === userId);
  if (!list.length) return null;
  return list.sort((a, b) => Number(b.id) - Number(a.id))[0];
};
async function isSubscribed(ctx) {
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    return ['member', 'administrator', 'creator'].includes(member?.status);
  } catch {
    return false;
  }
}

// --- Middleware –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
bot.use((ctx, next) => {
  if (ctx.from?.id) userIds.add(ctx.from.id);
  return next();
});

// --- START ---
bot.start(async (ctx) => {
  if (ctx.from?.id === ADMIN_ID) {
    return ctx.reply(
      'üë©‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      Markup.keyboard([
        ['üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤', 'üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞'],
        ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', 'üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä'],
        ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞']
      ]).resize()
    );
  }
  return ctx.reply(
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Hi üëã Please choose a language / Hallo üëã Bitte w√§hlen Sie eine Sprache',
    Markup.inlineKeyboard([
      [Markup.button.callback('üá©üá™ Deutsch', 'lang_de')],
      [Markup.button.callback('üá¨üáß English', 'lang_en')],
      [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')],
    ])
  );
});

// --- –í–∏–±—ñ—Ä –º–æ–≤–∏ ---
bot.action(['lang_de', 'lang_en', 'lang_ru'], async (ctx) => {
  await ctx.answerCbQuery();
  const lang = ctx.callbackQuery.data.split('_')[1] || 'en';
  userLanguage[ctx.from.id] = lang;
  return ctx.editMessageText(translations[lang].welcome, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback(translations[lang].order, 'order')],
      [Markup.button.callback(translations[lang].payment, 'payment')],
      [Markup.button.callback(translations[lang].shipping, 'shipping')],
      [Markup.button.callback(translations[lang].questions, 'questions')],
    ]),
  });
});

// --- Order ---
bot.action('order', async (ctx) => {
  await ctx.answerCbQuery();
  const lang = getLang(ctx.from.id);
  if (await isSubscribed(ctx)) {
    await ctx.reply(formTranslations[lang].askName);
    userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 63 } };
  } else {
    await ctx.reply(formTranslations[lang].subscribe, Markup.inlineKeyboard([
      [Markup.button.url(formTranslations[lang].subscribeBtn, `https://t.me/${CHANNEL_ID.replace('@', '')}`)],
      [Markup.button.callback(formTranslations[lang].checkSub, 'check_sub')],
      [Markup.button.callback(formTranslations[lang].buyNoSub, 'order_no_sub')],
    ]));
  }
});

bot.action('check_sub', async (ctx) => {
  await ctx.answerCbQuery();
  const lang = getLang(ctx.from.id);
  if (await isSubscribed(ctx)) {
    await ctx.reply(formTranslations[lang].askName);
    userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 63 } };
  } else {
    await ctx.reply(formTranslations[lang].notSubscribed);
  }
});

bot.action('order_no_sub', async (ctx) => {
  await ctx.answerCbQuery();
  const lang = getLang(ctx.from.id);
  await ctx.reply(formTranslations[lang].askName);
  userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 70 } };
});

// --- –Ñ–î–ò–ù–ò–ô –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç—ñ–≤ ---
bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text.trim();

  // --- –Ø–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω —ñ —î state ---
  if (userId === ADMIN_ID && adminState[userId]) {
    const state = adminState[userId];

    if (state === "update_stock") {
      const newStock = parseInt(text);
      if (!isNaN(newStock) && newStock >= 0) {
        stock = newStock;
        await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${stock}`);
      } else {
        await ctx.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ");
      }
      adminState[userId] = null;
      return;
    }

    if (state === "enter_orderId") {
      adminState[userId] = { step: "enter_tracking", orderId: text };
      return ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:");
    }

    if (state?.step === "enter_tracking") {
      const trackNumber = text;
      const order = orders.find(o => o.id === state.orderId);
      if (order) {
        await bot.telegram.sendMessage(order.userId, `üì¶ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${trackNumber}`);
        await ctx.reply(`‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (üÜî ${order.id})`);
        stock = Math.max(0, stock - 1);
      } else {
        await ctx.reply("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }
      adminState[userId] = null;
      return;
    }

    if (state === "broadcast") {
      let success = 0, fail = 0;
      for (let id of userIds) {
        try {
          await bot.telegram.sendMessage(id, text, { parse_mode: "Markdown" });
          success++;
        } catch {
          fail++;
        }
      }
      ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${success}, –æ—à–∏–±–æ–∫: ${fail}`);
      adminState[userId] = null;
      return;
    }
  }

  // --- –Ø–∫—â–æ —Ü–µ —é–∑–µ—Ä —ñ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
  const order = userOrders[userId];
  if (!order) return;
  const lang = order.lang;

  switch (order.step) {
    case "name":
      if (text.split(" ").length < 2) return ctx.reply(formTranslations[lang].errorName);
      order.data.name = text;
      order.step = "address";
      return ctx.reply(formTranslations[lang].askAddress);

    case "address":
      order.data.address = text;
      order.step = "email";
      return ctx.reply(formTranslations[lang].askEmail);

    case "email": {
      const email = text.trim();
      if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email)) {
        return ctx.reply(formTranslations[lang].errorEmail);
      }
      order.data.email = email;
      order.step = "phone";
      return ctx.reply(formTranslations[lang].askPhone);
    }

    case "phone": {
      const phone = text.trim();
      if (!/^\+\d{9,15}$/.test(phone)) {
        return ctx.reply(formTranslations[lang].errorPhone || "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü—Ä–∏–∫–ª–∞–¥: +380931234567");
      }
      order.data.phone = phone;
      order.step = "payment";
      return ctx.reply(formTranslations[lang].askPayment, Markup.inlineKeyboard([
        [Markup.button.callback(formTranslations[lang].payPaypal, "pay_paypal")],
        [Markup.button.callback(formTranslations[lang].paySepa, "pay_sepa")]
      ]));
    }
  }
});

// --- –û–ø–ª–∞—Ç–∞ ---
bot.action(['pay_paypal', 'pay_sepa'], async (ctx) => {
  await ctx.answerCbQuery();
  const order = userOrders[ctx.from.id];
  if (!order) return;
  const lang = order.lang;
  const orderId = Date.now().toString();
  const isPaypal = ctx.callbackQuery.data === 'pay_paypal';

  order.data.payment = isPaypal ? 'PayPal' : 'SEPA';
  order.id = orderId;
  order.userId = ctx.from.id;
  orders.push(order);

  const messageText = isPaypal
    ? formTranslations[lang].paypalMsg(order.data.price, orderId)
    : formTranslations[lang].sepaMsg(order.data.price, orderId);

  await ctx.reply(messageText, { parse_mode: "Markdown", disable_web_page_preview: true });

  const orderSummary = `
üÜî –ó–∞–∫–∞–∑: ${orderId}
üë§ –ò–º—è: ${order.data.name}
üè† –ê–¥—Ä–µ—Å: ${order.data.address}
‚úâÔ∏è Email: ${order.data.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.data.phone}
üí≥ –û–ø–ª–∞—Ç–∞: ${order.data.payment}
üí∞ –°—É–º–º–∞: ${order.data.price} ‚Ç¨
  `;
  if (ADMIN_ID) await ctx.telegram.sendMessage(ADMIN_ID, `üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n${orderSummary}`);

  delete userOrders[ctx.from.id];
});

// --- –§–æ—Ç–æ (—á–µ–∫) ---
bot.on('photo', async (ctx) => {
  const lang = getLang(ctx.from.id);
  const order = lastOrderFor(ctx.from.id);
  if (!order) return ctx.reply(formTranslations[lang].orderNotFound);

  const photoId = ctx.message.photo.at(-1).file_id;
  await ctx.telegram.sendPhoto(ADMIN_ID, photoId, {
    caption: `üñº –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\nüÜî –ó–∞–∫–∞–∑: ${order.id}`,
    reply_markup: {
      inline_keyboard: [[{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data: `confirm_${order.id}` }]]
    }
  });
  ctx.reply(formTranslations[lang].paymentSent);
});

// --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º ---
bot.action(/confirm_(.+)/, async (ctx) => {
  await ctx.answerCbQuery();
  const orderId = ctx.match[1];
  const order = orders.find(o => o.id === orderId);
  if (!order) return ctx.reply("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
  const lang = order.lang;
  await bot.telegram.sendMessage(order.userId, formTranslations[lang].paymentConfirmed);
  ctx.reply(`‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!`);
});

// --- –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å ---
bot.hears("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  if (!orders.length) return ctx.reply("‚ÑπÔ∏è –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç");
  const list = orders.map(o => `üÜî ${o.id} | ${o.data.name} | ${o.data.price}‚Ç¨`).join("\n");
  ctx.reply(`üìã –ó–∞–∫–∞–∑—ã:\n\n${list}\n\nüìä –û—Å—Ç–∞—Ç–æ–∫: ${stock}`);
});

bot.hears("üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤: ${stock}`);
});

bot.hears("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤:");
  adminState[ctx.from.id] = "update_stock";
});

bot.hears("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply("üì¶ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:");
  adminState[ctx.from.id] = "enter_orderId";
});

bot.hears("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:");
  adminState[ctx.from.id] = "broadcast";
});

// --- –°–µ—Ä–≤–µ—Ä ---
const app = express();
app.use(express.json());
if (WEBHOOK_URL) app.use(bot.webhookCallback('/webhook'));

app.get('/', (req, res) => res.send('Bot is running üöÄ'));
app.listen(PORT, async () => {
  console.log('Server running on port', PORT);
  if (WEBHOOK_URL) {
    try {
      await bot.telegram.setWebhook(`${WEBHOOK_URL}/webhook`, { drop_pending_updates: true });
      console.log('Webhook set to', `${WEBHOOK_URL}/webhook`);
    } catch (e) {
      console.error('Webhook error, switching to polling...', e.message);
      await bot.telegram.deleteWebhook().catch(() => {});
      await bot.launch();
    }
  } else {
    await bot.telegram.deleteWebhook().catch(() => {});
    await bot.launch();
    console.log('Polling started (no WEBHOOK_URL)');
  }
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
