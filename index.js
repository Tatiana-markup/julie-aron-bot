require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const express = require('express');

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = 477219279; // —Ç–≤—ñ–π Telegram ID
const CHANNEL_ID = '@Julii_und_Aron';

// --- –¢–µ–∫—Å—Ç–∏ –¥–ª—è –≤—ñ—Ç–∞–Ω–Ω—è ---
const translations = {
  de: {
    welcome: `
üíé *Deine Chance auf einen Duft, den man nie vergisst*

Statt *600 ‚Ç¨* ‚Äî nur *63 ‚Ç¨* f√ºr ein Set aus drei luxuri√∂sen D√ºften:

‚ú® *Red Crystal* (wie Baccarat Rouge 540) ‚Äî die Energie der Begierde in jeder Note.  
üå∏ *Rive Droite* (wie Fleur Narcotic) ‚Äî Eleganz und Leichtigkeit f√ºr jeden Tag.  
üî• *Nossi* (exklusives Parfum) ‚Äî ein Duft, der beeindruckt.  

Im Set: *150 ml + 15 ml Proben*.  
üîê Nur *20 Sets* ‚Äî Exklusivit√§t, die im Nu verschwindet.
    `,
    order: 'üõí Bestellen f√ºr 63 ‚Ç¨',
    payment: 'üí≥ Zahlungsbedingungen',
    shipping: 'üì¶ Lieferbedingungen',
    questions: '‚ùì Fragen'
  },
  en: {
    welcome: `
üíé *Your chance to own an unforgettable fragrance*

Instead of *‚Ç¨600* ‚Äî only *‚Ç¨63* for a set of three luxurious scents:

‚ú® *Red Crystal* (like Baccarat Rouge 540) ‚Äî the energy of desire in every note.  
üå∏ *Rive Droite* (like Fleur Narcotic) ‚Äî elegance and lightness for every day.  
üî• *Nossi* (exclusive creation) ‚Äî a fragrance designed to impress.  

Includes *150 ml + 15 ml testers*.  
üîê Only *20 sets* ‚Äî exclusivity that disappears before your eyes.
    `,
    order: 'üõí Order for ‚Ç¨63',
    payment: 'üí≥ Payment terms',
    shipping: 'üì¶ Shipping terms',
    questions: '‚ùì Questions'
  },
  ru: {
    welcome: `
üíé *–¢–≤–æ–π —à–∞–Ω—Å –Ω–∞ –∞—Ä–æ–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±—ã—Ç—å*

–í–º–µ—Å—Ç–æ *600 ‚Ç¨* ‚Äî –≤—Å–µ–≥–æ *63 ‚Ç¨* –∑–∞ –Ω–∞–±–æ—Ä –∏–∑ —Ç—Ä—ë—Ö —Ä–æ—Å–∫–æ—à–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤:

‚ú® *Red Crystal* (–∫–∞–∫ Baccarat Rouge 540) ‚Äî —ç–Ω–µ—Ä–≥–∏—è –∂–µ–ª–∞–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π –Ω–æ—Ç–µ.  
üå∏ *Rive Droite* (–∫–∞–∫ Fleur Narcotic) ‚Äî —É—Ç–æ–Ω—á—ë–Ω–Ω–æ—Å—Ç—å –∏ –ª—ë–≥–∫–æ—Å—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.  
üî• *Nossi* (–∞–≤—Ç–æ—Ä—Å–∫–∏–π —ç–∫—Å–∫–ª—é–∑–∏–≤) ‚Äî –∞—Ä–æ–º–∞—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ä–∞–∂–∞—Ç—å.  

–í –∫–æ–º–ø–ª–µ–∫—Ç–µ: *150 –º–ª + 15 –º–ª –ø—Ä–æ–±–Ω–∏–∫–æ–≤*.  
üîê –í—Å–µ–≥–æ *20 –Ω–∞–±–æ—Ä–æ–≤* ‚Äî —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å, –∏—Å—á–µ–∑–∞—é—â–∞—è –Ω–∞ –≥–ª–∞–∑–∞—Ö.
    `,
    order: 'üõí –ó–∞–∫–∞–∑–∞—Ç—å –∑–∞ 63 ‚Ç¨',
    payment: 'üí≥ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã',
    shipping: 'üì¶ –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏',
    questions: '‚ùì –í–æ–ø—Ä–æ—Å—ã'
  }
};

// --- –¢–µ–∫—Å—Ç–∏ –¥–ª—è —Ñ–æ—Ä–º–∏ ---
const formTranslations = {
  de: {
    subscribe: 'üëâ Abonniere den Kanal, um 10% Rabatt zu erhalten und das Set f√ºr 63 ‚Ç¨ zu bekommen',
    subscribeBtn: 'üîî Abonnieren',
    checkSub: '‚úÖ Ich habe abonniert',
    notSubscribed: '‚ùå Sie haben den Kanal noch nicht abonniert. Bitte zuerst abonnieren üëÜ',
    buyNoSub: 'üí≥ Ohne Abo f√ºr 70 ‚Ç¨ kaufen',
    askName: 'Bitte geben Sie Ihren vollst√§ndigen Namen ein:',
    askAddress: 'Bitte geben Sie Ihre Lieferadresse ein (Land, Stadt, PLZ, Stra√üe/Haus/Wohnung):',
    askEmail: 'Bitte geben Sie Ihre E-Mail-Adresse ein:',
    askPhone: 'Bitte geben Sie Ihre Telefonnummer ein:',
    askPayment: 'W√§hlen Sie die Zahlungsmethode:',
    payPaypal: 'üí≥ PayPal',
    paySepa: 'üè¶ SEPA-√úberweisung',
    successPayment: '‚úÖ Zahlung erhalten.\nIhre Bestellung wird morgen versendet.\nDie Sendungsnummer erhalten Sie in diesem Chat.'
  },
  en: {
    subscribe: 'üëâ Subscribe to the channel to get 10% off and grab the set for ‚Ç¨63',
    subscribeBtn: 'üîî Subscribe',
    checkSub: '‚úÖ I subscribed',
    notSubscribed: '‚ùå You are not subscribed yet. Please subscribe first üëÜ',
    buyNoSub: 'üí≥ Buy without subscription for ‚Ç¨70',
    askName: 'Please enter your full name:',
    askAddress: 'Please enter your delivery address (Country, City, Zip, Street/House/Apartment):',
    askEmail: 'Please enter your email:',
    askPhone: 'Please enter your phone number:',
    askPayment: 'Choose payment method:',
    payPaypal: 'üí≥ PayPal',
    paySepa: 'üè¶ SEPA Transfer',
    successPayment: '‚úÖ Payment received.\nYour order will be shipped tomorrow.\nThe tracking number will be sent to this chat.'
  },
  ru: {
    subscribe: 'üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 10% –∏ –∑–∞–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∑–∞ 63 ‚Ç¨',
    subscribeBtn: 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
    checkSub: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è',
    notSubscribed: '‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å üëÜ',
    buyNoSub: 'üí≥ –ö—É–ø–∏—Ç—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ 70 ‚Ç¨',
    askName: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:',
    askAddress: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–°—Ç—Ä–∞–Ω–∞, –ì–æ—Ä–æ–¥, –ò–Ω–¥–µ–∫—Å, –£–ª–∏—Ü–∞/–¥–æ–º/–∫–≤.):',
    askEmail: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:',
    askPhone: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:',
    askPayment: '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:',
    payPaypal: 'üí≥ PayPal',
    paySepa: 'üè¶ SEPA-–ø–µ—Ä–µ–≤–æ–¥',
    successPayment: '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.\n–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–≤—Ç—Ä–∞.\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø—Ä–∏–¥—ë—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.'
  }
};

// --- –¢–∏–º—á–∞—Å–æ–≤—ñ —Å—Ö–æ–≤–∏—â–∞ ---
const userLanguage = {};
const userOrders = {};
let orderCounter = 1;

// --- –°—Ç–∞—Ä—Ç ---
bot.start((ctx) => {
  ctx.reply(
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Hi üëã Please choose a language / Hallo üëã Bitte w√§hlen Sie eine Sprache',
    Markup.inlineKeyboard([
      [Markup.button.callback('üá©üá™ Deutsch', 'lang_de')],
      [Markup.button.callback('üá¨üáß English', 'lang_en')],
      [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')]
    ])
  );
});

// --- –í–∏–±—ñ—Ä –º–æ–≤–∏ ---
bot.action(['lang_de', 'lang_en', 'lang_ru'], (ctx) => {
  ctx.answerCbQuery();
  let lang = ctx.match[0].split('_')[1];
  userLanguage[ctx.from.id] = lang;

  ctx.reply(translations[lang].welcome, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback(translations[lang].order, 'order')],
      [Markup.button.callback(translations[lang].payment, 'payment')],
      [Markup.button.callback(translations[lang].shipping, 'shipping')],
      [Markup.button.callback(translations[lang].questions, 'questions')]
    ])
  });
});

// --- Order ---
bot.action('order', async (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    if (['member', 'administrator', 'creator'].includes(member.status)) {
      ctx.reply(formTranslations[lang].askName);
      userOrders[ctx.from.id] = { id: orderCounter++, step: 'name', lang, data: { price: 63 } };
    } else {
      ctx.reply(formTranslations[lang].subscribe, Markup.inlineKeyboard([
        [Markup.button.url(formTranslations[lang].subscribeBtn, 'https://t.me/Julii_und_Aron')],
        [Markup.button.callback(formTranslations[lang].checkSub, 'check_sub')],
        [Markup.button.callback(formTranslations[lang].buyNoSub, 'order_no_sub')]
      ]));
    }
  } catch (err) {
    console.error(err);
    ctx.reply('‚ö†Ô∏è Error checking subscription');
  }
});

// --- Check subscription ---
bot.action('check_sub', async (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    if (['member', 'administrator', 'creator'].includes(member.status)) {
      ctx.reply(formTranslations[lang].askName);
      userOrders[ctx.from.id] = { id: orderCounter++, step: 'name', lang, data: { price: 63 } };
    } else {
      ctx.reply(formTranslations[lang].notSubscribed);
    }
  } catch (err) {
    console.error(err);
    ctx.reply('‚ö†Ô∏è Error checking subscription');
  }
});

// --- No subscription order ---
bot.action('order_no_sub', (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  ctx.reply(formTranslations[lang].askName);
  userOrders[ctx.from.id] = { id: orderCounter++, step: 'name', lang, data: { price: 70 } };
});

// --- Form handling ---
bot.on('text', (ctx) => {
  const order = userOrders[ctx.from.id];
  if (!order) return;

  const lang = order.lang;
  switch (order.step) {
    case 'name':
      order.data.name = ctx.message.text;
      order.step = 'address';
      ctx.reply(formTranslations[lang].askAddress);
      break;
    case 'address':
      order.data.address = ctx.message.text;
      order.step = 'email';
      ctx.reply(formTranslations[lang].askEmail);
      break;
    case 'email':
      order.data.email = ctx.message.text;
      order.step = 'phone';
      ctx.reply(formTranslations[lang].askPhone);
      break;
    case 'phone':
      order.data.phone = ctx.message.text;
      order.step = 'payment';
      ctx.reply(formTranslations[lang].askPayment, Markup.inlineKeyboard([
        [Markup.button.callback(formTranslations[lang].payPaypal, 'pay_paypal')],
        [Markup.button.callback(formTranslations[lang].paySepa, 'pay_sepa')]
      ]));
      break;
  }
});

// --- –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä—ñ–Ω –æ–ø–ª–∞—Ç–∏) ---
bot.on('photo', async (ctx) => {
  const order = userOrders[ctx.from.id];
  if (!order) return;
  const lang = order.lang;

  const photo = ctx.message.photo[ctx.message.photo.length - 1];
  const fileId = photo.file_id;

  await ctx.telegram.sendPhoto(ADMIN_ID, fileId, {
    caption: `üì∑ –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É #${order.id}\nüë§ ${order.data.name}\nüí∞ ${order.data.price} ‚Ç¨`
  });

  await ctx.reply(
    lang === 'de'
      ? '‚úÖ Vielen Dank! Ihr Zahlungsnachweis wurde an den Administrator gesendet.'
      : lang === 'ru'
      ? '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      : '‚úÖ Thank you! Your payment screenshot has been sent to the administrator.'
  );
});

// --- –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (pdf, jpg —ñ —Ç.–¥.) ---
bot.on('document', async (ctx) => {
  const order = userOrders[ctx.from.id];
  if (!order) return;
  const lang = order.lang;

  const fileId = ctx.message.document.file_id;
  await ctx.telegram.sendDocument(ADMIN_ID, fileId, {
    caption: `üìé –î–æ–∫—É–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É #${order.id}\nüë§ ${order.data.name}\nüí∞ ${order.data.price} ‚Ç¨`
  });

  await ctx.reply(
    lang === 'de'
      ? '‚úÖ Vielen Dank! Ihr Zahlungsnachweis wurde an den Administrator gesendet.'
      : lang === 'ru'
      ? '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —Ñ–∞–π–ª –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      : '‚úÖ Thank you! Your payment file has been sent to the administrator.'
  );
});

// --- –û–ø–ª–∞—Ç–∞ ---
bot.action(['pay_paypal', 'pay_sepa'], async (ctx) => {
  const order = userOrders[ctx.from.id];
  if (!order) return;
  const lang = order.lang;

  if (ctx.match[0] === 'pay_paypal') {
    const link = order.data.price === 63
      ? 'https://www.paypal.com/paypalme/JuliiAron/63'
      : 'https://www.paypal.com/paypalme/JuliiAron/70';
    await ctx.reply(`üîó PayPal Link: ${link}`);
  } else {
    await ctx.reply(`
üè¶ *SEPA √úberweisung*

Empf√§nger: Iuliia Troshina
IBAN: DE77 7505 0000 0027 9627 45
BIC: BYLADEM1RBG
Summe: ${order.data.price} ‚Ç¨
Verwendungszweck: Julii & Aron Bestellung ${order.data.price} ‚Ç¨

Bitte laden Sie einen Screenshot der √úberweisung hoch.
    `, { parse_mode: 'Markdown' });
  }

  // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  await ctx.telegram.sendMessage(ADMIN_ID, `
üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}
üë§ ${order.data.name}
üè† ${order.data.address}
‚úâÔ∏è ${order.data.email}
üì± ${order.data.phone}
üí∞ ${order.data.price} ‚Ç¨
üí≥ ${ctx.match[0] === 'pay_paypal' ? 'PayPal' : 'SEPA'}
  `, Markup.inlineKeyboard([
    [Markup.button.callback(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ #${order.id}`, `confirm_${order.id}_${order.lang}`)]
  ]));
});

// --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω–æ–º ---
bot.action(/confirm_(\d+)_(\w+)/, async (ctx) => {
  const orderId = ctx.match[1];
  const lang = ctx.match[2];

  await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π (–∞–¥–º–∏–Ω)`);

  // —à—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const userId = Object.keys(userOrders).find(uid => userOrders[uid].id == orderId);
  if (userId) {
    await ctx.telegram.sendMessage(userId, formTranslations[lang].successPayment);
    delete userOrders[userId];
  }
});

// --- Express –¥–ª—è Railway ---
const app = express();
app.use(express.json());
app.use(bot.webhookCallback('/webhook'));
bot.telegram.setWebhook(process.env.WEBHOOK_URL + '/webhook');

app.get('/', (req, res) => res.send('Bot is running üöÄ'));

app.listen(process.env.PORT || 8080, () => {
  console.log('Server running on port', process.env.PORT || 8080);
});
