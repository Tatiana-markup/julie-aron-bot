require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const express = require('express');

// --- –ü–µ—Ä–µ–∫–ª–∞–¥–∏ ---
const { translations, formTranslations } = require('./translations');

// --- ENV ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID) || 0;
const CHANNEL_ID = process.env.CHANNEL_ID || '@Julii_und_Aron';
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = Number(process.env.PORT) || 8080;

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required');
const bot = new Telegraf(BOT_TOKEN);

// --- –°—Ö–æ–≤–∏—â–∞ ---
let stock = 20;
const userLanguage = {};
const userOrders = {};
let orders = [];
const adminState = {};
const userIds = new Set();

// --- –•–µ–ª–ø–µ—Ä–∏ ---
const getLang = (userId) => userLanguage[userId] || 'en';
const lastOrderFor = (userId) => {
  const list = orders.filter(o => o.userId === userId);
  if (!list.length) return null;
  return list.sort((a, b) => Number(b.id) - Number(a.id))[0];
};

async function isSubscribed(ctx) {
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    return ['member', 'administrator', 'creator'].includes(member?.status);
  } catch {
    return false;
  }
}

// --- Middleware ---
bot.use((ctx, next) => {
  if (ctx.from?.id) userIds.add(ctx.from.id);
  return next();
});

// --- START ---
bot.start(async (ctx) => {
  if (ctx.from?.id === ADMIN_ID) {
    return ctx.reply(
      'üë©‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      Markup.keyboard([
        ['üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤', 'üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞'],
        ['‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', 'üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä'],
        ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞']
      ]).resize()
    );
  }
  return ctx.reply(
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Hi üëã Please choose a language / Hallo üëã Bitte w√§hlen Sie eine Sprache',
    Markup.inlineKeyboard([
      [Markup.button.callback('üá©üá™ Deutsch', 'lang_de')],
      [Markup.button.callback('üá¨üáß English', 'lang_en')],
      [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')],
    ])
  );
});

// --- –í–∏–±—ñ—Ä –º–æ–≤–∏ ---
bot.action(['lang_de', 'lang_en', 'lang_ru'], async (ctx) => {
  await ctx.answerCbQuery();
  const lang = ctx.callbackQuery.data.split('_')[1] || 'en';
  userLanguage[ctx.from.id] = lang;

  return ctx.editMessageText(translations[lang].welcome, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback(translations[lang].order, 'order')],
      [Markup.button.callback(translations[lang].fragrances, 'fragrances')],
      [Markup.button.callback(translations[lang].payment, 'payment')],
      [Markup.button.callback(translations[lang].shipping, 'shipping')],
      [Markup.button.callback(translations[lang].questions, 'questions')],
    ]),
  });
});

// --- –ü—Ä–æ –∞—Ä–æ–º–∞—Ç–∏ ---
bot.action('fragrances', async (ctx) => {
  const lang = getLang(ctx.from.id);
  await ctx.answerCbQuery();
  return ctx.editMessageText(formTranslations[lang].chooseAroma, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ú® Red Crystal', 'aroma_red'),
        Markup.button.callback('üå∏ Rive Droite', 'aroma_rive'),
      ],
      [Markup.button.callback('üî• Nossi', 'aroma_nossi')],
      [Markup.button.callback(formTranslations[lang].back, 'back_to_menu')],
    ]),
  });
});

// --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞—Ä–æ–º–∞—Ç—ñ–≤ ---
bot.action(['aroma_red', 'aroma_rive', 'aroma_nossi'], async (ctx) => {
  const lang = getLang(ctx.from.id);
  await ctx.answerCbQuery();
  let text = '';
  if (ctx.callbackQuery.data === 'aroma_red') text = formTranslations[lang].aromaRed;
  if (ctx.callbackQuery.data === 'aroma_rive') text = formTranslations[lang].aromaRive;
  if (ctx.callbackQuery.data === 'aroma_nossi') text = formTranslations[lang].aromaNossi;

  return ctx.editMessageText(text, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [
        Markup.button.callback('‚ú® Red Crystal', 'aroma_red'),
        Markup.button.callback('üå∏ Rive Droite', 'aroma_rive'),
      ],
      [Markup.button.callback('üî• Nossi', 'aroma_nossi')],
      [Markup.button.callback(formTranslations[lang].back, 'back_to_menu')],
    ]),
  });
});

// --- –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã ---
bot.action('payment', async (ctx) => {
  const lang = getLang(ctx.from.id);
  await ctx.answerCbQuery();
  return ctx.editMessageText(formTranslations[lang].paymentInfo, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([[Markup.button.callback(formTranslations[lang].back, 'back_to_menu')]]),
  });
});

// --- –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ ---
bot.action('shipping', async (ctx) => {
  const lang = getLang(ctx.from.id);
  await ctx.answerCbQuery();
  return ctx.editMessageText(formTranslations[lang].shippingInfo, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([[Markup.button.callback(formTranslations[lang].back, 'back_to_menu')]]),
  });
});

// --- –í–æ–ø—Ä–æ—Å—ã ---
bot.action('questions', async (ctx) => {
  const lang = getLang(ctx.from.id);
  await ctx.answerCbQuery();
  return ctx.editMessageText(formTranslations[lang].questionsInfo, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([[Markup.button.callback(formTranslations[lang].back, 'back_to_menu')]]),
  });
});

// --- –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª ---
bot.action('back_to_menu', async (ctx) => {
  const lang = getLang(ctx.from.id);
  await ctx.answerCbQuery();
  return ctx.editMessageText(translations[lang].welcome, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback(translations[lang].order, 'order')],
      [Markup.button.callback(translations[lang].fragrances, 'fragrances')],
      [Markup.button.callback(translations[lang].payment, 'payment')],
      [Markup.button.callback(translations[lang].shipping, 'shipping')],
      [Markup.button.callback(translations[lang].questions, 'questions')],
    ]),
  });
});

// --- –ö–Ω–æ–ø–∫–∞ ¬´–ö—É–ø–∏—Ç–∏ –∑–∞ 63 ‚Ç¨¬ª ---
bot.action('order', async (ctx) => {
  await ctx.answerCbQuery();
  const lang = getLang(ctx.from.id);
  try {
    const subscribed = await isSubscribed(ctx);
    if (subscribed) {
      userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 63 } };
      return ctx.reply(formTranslations[lang].askName);
    } else {
      return ctx.reply(
        formTranslations[lang].subscribe || 'üîî –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∏–∂–∫—É!',
        Markup.inlineKeyboard([
          [Markup.button.url(formTranslations[lang].subscribeBtn || '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å', `https://t.me/${CHANNEL_ID.replace('@', '')}`)],
          [Markup.button.callback(formTranslations[lang].checkSub || '‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è', 'check_sub')],
          [Markup.button.callback(formTranslations[lang].buyNoSub || 'üí∏ –ö—É–ø–∏—Ç–∏ –±–µ–∑ –∑–Ω–∏–∂–∫–∏ (70‚Ç¨)', 'order_no_sub')],
        ])
      );
    }
  } catch (err) {
    console.error('Error in order:', err);
    return ctx.reply('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});
