require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { translations, formTranslations } = require('./translations');

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = 477219279;
const CHANNEL_ID = '@Julii_und_Aron';

// --- –¢–∏–º—á–∞—Å–æ–≤—ñ —Å—Ö–æ–≤–∏—â–∞ ---
const userLanguage = {};
const userOrders = {};
let orders = [];

// --- –°—Ç–∞—Ä—Ç ---
bot.start((ctx) => {
  ctx.reply(
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Hi üëã Please choose a language / Hallo üëã Bitte w√§hlen Sie eine Sprache',
    Markup.inlineKeyboard([
      [Markup.button.callback('üá©üá™ Deutsch', 'lang_de')],
      [Markup.button.callback('üá¨üáß English', 'lang_en')],
      [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')]
    ])
  );
});

// --- –í–∏–±—ñ—Ä –º–æ–≤–∏ ---
bot.action(['lang_de', 'lang_en', 'lang_ru'], (ctx) => {
  ctx.answerCbQuery();
  let lang = ctx.match[0].split('_')[1];
  userLanguage[ctx.from.id] = lang;

  ctx.reply(translations[lang].welcome, {
    parse_mode: 'Markdown',
    ...Markup.inlineKeyboard([
      [Markup.button.callback(translations[lang].order, 'order')],
      [Markup.button.callback(translations[lang].payment, 'payment')],
      [Markup.button.callback(translations[lang].shipping, 'shipping')],
      [Markup.button.callback(translations[lang].questions, 'questions')]
    ])
  });
});

// --- Order ---
bot.action('order', async (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    if (['member', 'administrator', 'creator'].includes(member.status)) {
      ctx.reply(formTranslations[lang].askName);
      userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 63 } };
    } else {
      ctx.reply(formTranslations[lang].subscribe, Markup.inlineKeyboard([
        [Markup.button.url(formTranslations[lang].subscribeBtn, 'https://t.me/Julii_und_Aron')],
        [Markup.button.callback(formTranslations[lang].checkSub, 'check_sub')],
        [Markup.button.callback(formTranslations[lang].buyNoSub, 'order_no_sub')]
      ]));
    }
  } catch (err) {
    console.error(err);
    ctx.reply('‚ö†Ô∏è Error checking subscription');
  }
});

// --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
bot.action('check_sub', async (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  try {
    const member = await ctx.telegram.getChatMember(CHANNEL_ID, ctx.from.id);
    if (['member', 'administrator', 'creator'].includes(member.status)) {
      ctx.reply(formTranslations[lang].askName);
      userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 63 } };
    } else {
      ctx.reply(formTranslations[lang].notSubscribed);
    }
  } catch (err) {
    ctx.reply('‚ö†Ô∏è Error checking subscription');
  }
});

// --- –ë–µ–∑ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
bot.action('order_no_sub', (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  ctx.reply(formTranslations[lang].askName);
  userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 70 } };
});

// --- –§–æ—Ä–º–∞ ---
bot.on('text', (ctx) => {
  const order = userOrders[ctx.from.id];
  if (!order) return;
  const lang = order.lang;
  const text = ctx.message.text.trim();

  switch (order.step) {
    case 'name':
      if (text.split(" ").length < 2) {
        return ctx.reply("‚ùå Name must contain at least 2 words / –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞ / –Ü–º‚Äô—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞");
      }
      order.data.name = text;
      order.step = 'address';
      ctx.reply(formTranslations[lang].askAddress);
      break;
    case 'address':
      order.data.address = text;
      order.step = 'email';
      ctx.reply(formTranslations[lang].askEmail);
      break;
    case 'email':
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text)) {
        return ctx.reply("‚ùå Invalid email / –ù–µ–≤–µ—Ä–Ω—ã–π email / –ù–µ–≤—ñ—Ä–Ω–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ—à—Ç–∏");
      }
      order.data.email = text;
      order.step = 'phone';
      ctx.reply(formTranslations[lang].askPhone);
      break;
    case 'phone':
      if (!/^\+\d{7,15}$/.test(text)) {
        return ctx.reply("‚ùå Invalid phone format. Example: +491234567890 / –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79123456789 / –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü—Ä–∏–∫–ª–∞–¥: +380931234567");
      }
      order.data.phone = text;
      order.step = 'payment';
      ctx.reply(formTranslations[lang].askPayment, Markup.inlineKeyboard([
        [Markup.button.callback(formTranslations[lang].payPaypal, 'pay_paypal')],
        [Markup.button.callback(formTranslations[lang].paySepa, 'pay_sepa')]
      ]));
      break;
  }
});

// --- –û–ø–ª–∞—Ç–∞ ---
bot.action(['pay_paypal', 'pay_sepa'], (ctx) => {
  const order = userOrders[ctx.from.id];
  if (!order) return;
  const lang = order.lang;
  const orderId = Date.now().toString();

  order.data.payment = ctx.match[0] === 'pay_paypal' ? 'PayPal' : 'SEPA';
  order.id = orderId;
  order.userId = ctx.from.id;

  orders.push(order);

  let message = "";
  if (ctx.match[0] === 'pay_paypal') {
    const link = order.data.price === 63
      ? "https://www.paypal.com/paypalme/JuliiAron/63"
      : "https://www.paypal.com/paypalme/JuliiAron/70";

    if (lang === "de") {
      message = `üîó [${order.data.price} ‚Ç¨ ‚Üí PayPal](${link})\n\nBitte f√ºhren Sie die Zahlung durch und senden Sie einen Screenshot zur Best√§tigung.\nüÜî Bestellnummer: ${orderId}`;
    } else if (lang === "ru") {
      message = `üîó [${order.data.price} ‚Ç¨ ‚Üí PayPal](${link})\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\nüÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}`;
    } else {
      message = `üîó [${order.data.price} ‚Ç¨ ‚Üí PayPal](${link})\n\nPlease make the payment and send a screenshot for confirmation.\nüÜî Order ID: ${orderId}`;
    }
  } else {
    if (lang === "de") {
      message = `üè¶ SEPA-√úberweisung\n\nEmpf√§nger: Iuliia Troshina\nIBAN: DE77 7505 0000 0027 9627 45\nBIC: BYLADEM1RBG\nBetrag: ${order.data.price} ‚Ç¨\nVerwendungszweck: Julii & Aron Bestellung ${order.data.price}\n\nBitte f√ºhren Sie die Zahlung durch und senden Sie einen Screenshot zur Best√§tigung.\nüÜî Bestellnummer: ${orderId}`;
    } else if (lang === "ru") {
      message = `üè¶ SEPA-–ø–µ—Ä–µ–≤–æ–¥\n\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: Iuliia Troshina\nIBAN: DE77 7505 0000 0027 9627 45\nBIC: BYLADEM1RBG\n–°—É–º–º–∞: ${order.data.price} ‚Ç¨\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: Julii & Aron Bestellung ${order.data.price}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\nüÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}`;
    } else {
      message = `üè¶ SEPA Transfer\n\nRecipient: Iuliia Troshina\nIBAN: DE77 7505 0000 0027 9627 45\nBIC: BYLADEM1RBG\nAmount: ${order.data.price} ‚Ç¨\nPurpose: Julii & Aron Order ${order.data.price}\n\nPlease make the payment and send a screenshot for confirmation.\nüÜî Order ID: ${orderId}`;
    }
  }

  ctx.reply(message, { parse_mode: "Markdown" });

  // --- –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É (—Ä–æ—Å—ñ–π—Å—å–∫–æ—é) ---
  const orderSummary = `
üÜî –ó–∞–∫–∞–∑: ${orderId}
üë§ –ò–º—è: ${order.data.name}
üè† –ê–¥—Ä–µ—Å: ${order.data.address}
‚úâÔ∏è Email: ${order.data.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.data.phone}
üí≥ –û–ø–ª–∞—Ç–∞: ${order.data.payment}
üí∞ –°—É–º–º–∞: ${order.data.price} ‚Ç¨
  `;
  ctx.telegram.sendMessage(ADMIN_ID, `üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n${orderSummary}`);

  delete userOrders[ctx.from.id];
});

// --- –û–±—Ä–æ–±–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ ---
bot.on('photo', async (ctx) => {
  const lang = userLanguage[ctx.from.id] || 'en';
  const lastOrder = orders.find(o => o.userId === ctx.from.id);

  if (!lastOrder) {
    if (lang === "de") return ctx.reply("‚ö†Ô∏è Wir haben keine aktive Bestellung von Ihnen gefunden.");
    if (lang === "ru") return ctx.reply("‚ö†Ô∏è –£ –Ω–∞—Å –Ω–µ—Ç –≤–∞—à–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.");
    return ctx.reply("‚ö†Ô∏è We couldn't find your active order.");
  }

  const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;

  // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É —Ñ–æ—Ç–æ + ID –∑–∞–∫–∞–∑–∞
  await ctx.telegram.sendPhoto(ADMIN_ID, photoId, {
    caption: `üñº –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\nüÜî –ó–∞–∫–∞–∑: ${lastOrder.id}`
  });

  // –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
  if (lang === "de") {
    ctx.reply("‚úÖ Danke! Ihre Zahlungsbest√§tigung wurde an den Administrator gesendet.");
  } else if (lang === "ru") {
    ctx.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
  } else {
    ctx.reply("‚úÖ Thank you! Your payment confirmation has been sent to the administrator.");
  }
});

module.exports = bot;
