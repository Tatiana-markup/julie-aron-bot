const { Markup } = require('telegraf');
const { translations, formTranslations } = require('./translations');

const userLanguage = {};
const userOrders = {};
let orders = [];
let stock = 20;

module.exports = (bot) => {
  // –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  bot.start((ctx) => {
    if (ctx.from.id === parseInt(process.env.ADMIN_ID)) return; // –∞–¥–º—ñ–Ω –Ω–µ —é–∑–µ—Ä

    ctx.reply(
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Hi üëã Please choose a language / Hallo üëã Bitte w√§hlen Sie eine Sprache',
      Markup.inlineKeyboard([
        [Markup.button.callback('üá©üá™ Deutsch', 'lang_de')],
        [Markup.button.callback('üá¨üáß English', 'lang_en')],
        [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')]
      ])
    );
  });

  // –≤–∏–±—ñ—Ä –º–æ–≤–∏
  bot.action(['lang_de', 'lang_en', 'lang_ru'], (ctx) => {
    ctx.answerCbQuery();
    let lang = ctx.match[0].split('_')[1];
    userLanguage[ctx.from.id] = lang;

    ctx.reply(translations[lang].welcome, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback(translations[lang].order, 'order')],
        [Markup.button.callback(translations[lang].payment, 'payment')],
        [Markup.button.callback(translations[lang].shipping, 'shipping')],
        [Markup.button.callback(translations[lang].questions, 'questions')]
      ])
    });
  });

  // –æ–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  bot.action('order', async (ctx) => {
    const lang = userLanguage[ctx.from.id] || 'en';
    ctx.reply(formTranslations[lang].askName);
    userOrders[ctx.from.id] = { step: 'name', lang, data: { price: 63 } };
  });

  bot.on('text', (ctx) => {
    const order = userOrders[ctx.from.id];
    if (!order) return;
    const lang = order.lang;
    const text = ctx.message.text.trim();

    switch (order.step) {
      case 'name':
        if (text.split(" ").length < 2) {
          return ctx.reply("‚ùå Name must contain at least 2 words / –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞ / –Ü–º‚Äô—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞");
        }
        order.data.name = text;
        order.step = 'address';
        ctx.reply(formTranslations[lang].askAddress);
        break;
      case 'address':
        order.data.address = text;
        order.step = 'email';
        ctx.reply(formTranslations[lang].askEmail);
        break;
      case 'email':
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text)) {
          return ctx.reply("‚ùå Invalid email / –ù–µ–≤–µ—Ä–Ω—ã–π email / –ù–µ–≤—ñ—Ä–Ω–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ—à—Ç–∏");
        }
        order.data.email = text;
        order.step = 'phone';
        ctx.reply(formTranslations[lang].askPhone);
        break;
      case 'phone':
        if (!/^\+\d{7,15}$/.test(text)) {
          return ctx.reply("‚ùå Invalid phone format. Example: +491234567890 / –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79123456789 / –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü—Ä–∏–∫–ª–∞–¥: +380931234567");
        }
        order.data.phone = text;
        order.step = 'payment';
        ctx.reply(formTranslations[lang].askPayment, Markup.inlineKeyboard([
          [Markup.button.callback(formTranslations[lang].payPaypal, 'pay_paypal')],
          [Markup.button.callback(formTranslations[lang].paySepa, 'pay_sepa')]
        ]));
        break;
    }
  });

  bot.action(['pay_paypal', 'pay_sepa'], (ctx) => {
    const order = userOrders[ctx.from.id];
    if (!order) return;
    const lang = order.lang;
    const orderId = Date.now().toString();

    order.data.payment = ctx.match[0] === 'pay_paypal' ? 'PayPal' : 'SEPA';
    order.id = orderId;
    order.userId = ctx.from.id;

    orders.push(order);
    stock--; // –∞–≤—Ç–æ-–∑–º–µ–Ω—à–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—É

    ctx.telegram.sendMessage(process.env.ADMIN_ID, `üì¶ –ù–æ–≤–æ–µ –∑–∞–∫–∞–∑:\nID: ${orderId}\nName: ${order.data.name}\nPrice: ${order.data.price}‚Ç¨`);

    ctx.reply(formTranslations[lang].successPayment);
    delete userOrders[ctx.from.id];
  });

  return { orders, stock };
};
