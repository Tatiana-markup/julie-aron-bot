const { Markup } = require("telegraf");
const { ADMIN_ID } = require("./state");

function setupAdmin(bot, orders, stock, adminState) {
  bot.hears("/admin", (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    ctx.reply("üë©‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", Markup.keyboard([
      ["üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"],
      ["üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", "üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"]
    ]).resize());
  });

  bot.hears("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    if (orders.length === 0) {
      ctx.reply("‚ÑπÔ∏è –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç");
    } else {
      let list = orders.map(o => `üÜî ${o.id} | ${o.data.name} | ${o.data.price}‚Ç¨`).join("\n");
      ctx.reply(`üìã –ó–∞–∫–∞–∑—ã:\n\n${list}\n\n–û—Å—Ç–∞—Ç–æ–∫: ${stock}`);
    }
  });

  bot.hears("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤:");
    adminState[ctx.from.id] = "update_stock";
  });

  bot.hears("üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞", (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    ctx.reply(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤: ${stock}`);
  });

  bot.hears("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    ctx.reply("üì¶ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:");
    adminState[ctx.from.id] = "enter_orderId";
  });

  bot.on("text", (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    const state = adminState[ctx.from.id];

    if (state === "update_stock") {
      const newStock = parseInt(ctx.message.text);
      if (!isNaN(newStock) && newStock >= 0) {
        stock = newStock;
        ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${stock}`);
      } else {
        ctx.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ");
      }
      adminState[ctx.from.id] = null;
    }

    if (state === "enter_orderId") {
      const orderId = ctx.message.text;
      ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:");
      adminState[ctx.from.id] = { step: "enter_tracking", orderId };
    }

    if (state?.step === "enter_tracking") {
      const trackNumber = ctx.message.text;
      const order = orders.find(o => o.id === state.orderId);
      if (order) {
        bot.telegram.sendMessage(order.userId, `üì¶ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${trackNumber}`);
        ctx.reply(`‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (${order.id})`);

        // –∞–≤—Ç–æ-–∑–º–µ–Ω—à–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—É
        if (stock > 0) {
          stock -= 1;
          ctx.reply(`üìä –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ —É–º–µ–Ω—å—à–µ–Ω: ${stock}`);
        }
      } else {
        ctx.reply("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }
      adminState[ctx.from.id] = null;
    }
  });
}

module.exports = setupAdmin;
