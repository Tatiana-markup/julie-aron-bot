const { Markup } = require("telegraf");
const { ADMIN_ID } = require("./state");

function setupUser(bot, translations, formTranslations, userLanguage, userOrders, orders, stock) {
  bot.start((ctx) => {
    if (ctx.from.id === ADMIN_ID) {
      // –∞–¥–º—ñ–Ω –Ω–µ –±–∞—á–∏—Ç—å —é–∑–µ—Ä—Å—å–∫–µ –º–µ–Ω—é
      return;
    }

    ctx.reply(
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Hi üëã Please choose a language / Hallo üëã Bitte w√§hlen Sie eine Sprache',
      Markup.inlineKeyboard([
        [Markup.button.callback('üá©üá™ Deutsch', 'lang_de')],
        [Markup.button.callback('üá¨üáß English', 'lang_en')],
        [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')]
      ])
    );
  });

  // --- –í–∏–±—ñ—Ä –º–æ–≤–∏ ---
  bot.action(['lang_de', 'lang_en', 'lang_ru'], (ctx) => {
    ctx.answerCbQuery();
    let lang = ctx.match[0].split('_')[1];
    userLanguage[ctx.from.id] = lang;

    ctx.reply(translations[lang].welcome, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback(translations[lang].order, 'order')],
        [Markup.button.callback(translations[lang].payment, 'payment')],
        [Markup.button.callback(translations[lang].shipping, 'shipping')],
        [Markup.button.callback(translations[lang].questions, 'questions')]
      ])
    });
  });

  // --- –î–∞–ª—ñ —Ç–≤—ñ–π –∫–æ–¥ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (order, check_sub, order_no_sub, —Ñ–æ—Ä–º–∞ —ñ —Ç.–¥.) ---
}

module.exports = setupUser;
